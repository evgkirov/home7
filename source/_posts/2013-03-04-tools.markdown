---
layout: post
date: 2013-03-04 13:37
comments: true
published: true
categories: [как не надо, объективно]
title: "24 инструмента и технологии в веб-разработке, которых следует избегать как чумы"
---

Пускай это будет первым постом в моём новом блоге. Давно хотел опубликовать.

Список в алфавитном порядке, чтобы никого не обидеть. Думаю, некоторым экспонатам стоит отдельные посты посвятить.

<!-- more -->

## Bootstrap

Он всех достал уже! Та же чёрная шапка, те же градиентные кнопки с закруглёнными углами, та же типографика. Даже если человек потратит своё время и переопределит дефолтные стили, всё равно всем будет видно, что это Bootstrap. Он обязательно себя где-то выдаст.

Кстати, вы же помните, зачем нужен CSS? Чтобы отделить HTML от оформления, да? А теперь взгляните:

``` html
<div class="row">
  <div class="span9">
    Level 1 column
    <div class="row">
      <div class="span6">Level 2</div>
      <div class="span3">Level 2</div>
    </div>
  </div>
</div>
```

Кто-то сказал, что табличная вёрстка уже в прошлом?


## CSS

2013 год. У нас есть закруглённые уголки, падающие тени, красивые шрифты… И, чёрт возьми, до сих пор нет нормальных средств для создания лэйаута.


## CNAME

Конечно, CNAME удобнее A-записи, но какого чёрта я не могу прописать CNAME для самого домена? Amazon, кстати, недавно выпустил костыль для этого, но чтобы им воспользоваться, нужно перенести домен на их DNS…

См. также: www.


## CoffeeScript

У этого языка весьма спорный синтаксис.

*Честно говоря, я забыл, что мне в нём не нравится, позор мне. Так что представьте себе, что этот абзац посвящён обзору его недостатков.*

Плюс, во фреймворках, где нет поддержки этого языка, приходится что-то изобретать.


## Google App Engine и вообще привязка к платформе

Если вы пишете, скажем, на Rails, то вам доступно огромное количество вариантов, где можно разместить сайт: да хоть у себя дома. Но если вы пишете под Google App Engine, то вариант только один. А теперь представьте себе, что Google, например, повысит завтра цены в десять раз или вообще закроется — что будете делать?


## Google Chrome Frame

Может показаться, что вы сделали поддержку Internet Explorer, но на самом деле это не так. Нет никакой разницы, предлагать пользователям установить плагин Chrome Frame, либо вообще сделать заглушку «IE плохой, поставьте что-то другое».

См. также: плагины


## HAML

Это самый нечитабельный синтаксис, который я видел. Впрочем, мне понятно, зачем появился HAML — erb ещё хуже.


## HTML

Язык, созданный для притивной разметки текстовых документов, пытаются использовать при написании больших приложений.

См. также: CSS, JavaScript, кастомные контролы.


## JavaScript

Альтернатив ему нет, а недостатков прилично: слабая типизация, ООП на прототипах (что родило примерно 100501 реализацию классов для JS), а также огромное количество реально [странных](http://wtfjs.com/) [особенностей](http://habrahabr.ru/post/137188/). Моя любимая:

``` javascript
function laugh()
{
  return
  {
    haha: "ha!"
  };
}
laugh();
// returns undefined
```

См. также: PHP.


## jQuery

Проблема jQuery в его популярности. Сейчас его используют все подряд, по поводу и без, многие даже не знают, как написать что-либо без этой библиотеки.

Увы, культура разработки фронтэнда сейчас очень низкая. Грешу сам, мне было лень изучать JavaScript, поэтому я начал сразу с jQuery, и ни к чему хорошему это не привело. Это, кстати, главная из причин, по которым я не хочу открывать исходники «[Твоегорадио](http://tvoeradio.org/)»: там просто кошмарный код.

См. также: JavaScript.


## Lobster

Lobster — это новый Comic Sans.

См. также: веб-шрифты.


## PHP

Про PHP написано немало. Советую обратиться к статьям «[К вопросу об ублюдочности PHP](http://nuclight.livejournal.com/107170.html)» и «[PHP: a fractal of bad design](http://me.veekun.com/blog/2012/04/09/php-a-fractal-of-bad-design/)».


## PSD

PSD — это очень сложный и старый формат. Как следствие, он сносно поддерживается только одной программой — Photoshop. Я даже не уверен, что в самой Adobe есть спецификация к нему.

Пока страна борется с монополией власти, Photoshop приходит в каждую веб-студию.


## Retina

Математика. Доля OS X в рунете — 1%. Доля iPad в рунете — 3%. Всего 4%. Понятно, что далеко не все эти устройства обладают HDPI-дисплеями. Допустим, это половина от их общего числа — 2%. От этого числа количество пользователей, которые заметят разницу — 5%. То есть мы потратим очень много усилий, а разницу реально увидит 0,1% (одна десятая процента) пользователей, и то если будет вглядываться.

Доля Internet Explorer 6 сейчас — 0,3%. Что же, давайте верстать и под него, чем он хуже?

Более того, эта ситуация в ближайшее время не изменится, так как самая популярная ОС на рынке не умеет (и не собирается учиться) корректно работать с такими разрешениями.


## SASS

Мне нравится SASS. Единственная его проблема в том, что он мотивирует писать вот такой код:

``` scss
.container {
    article {
        h1 {
            font-size: 16px;
            a {
                color: #ff0000;
            }
        }
    }
}
```

Значит, на выходе будет:

``` css
.container article h1 {
    font-size: 16px; }
.container article h1 a {
    color: #ff0000; }
```

Это простой пример. А ведь часто бывает так:

``` css
.clearfix::before, .columns::before, .other-sources-list::before,
.footer__inner-wrap-2::before, .dark-flat__inner-wrap-2::before,
.source-info__connections::before, .source-info__meta::before, .footer-sources-list::before,
.source-comment__row-a::before, .source-comment__row-b::before, .guru-info::before,
.answer-list-block__inner-wrap::before, .answer__row-a::before, .answer__row-b::before,
.settings-form-layout__cols::before, .bookshelf-item .bookshelf-item__row-a::before,
.bookshelf-item__row-b::before, .settings-form .control-group::before,
.toolbar__inner-wrap::before, .footer__nav > ul::before, .source-line::before,
.welcome-menu::before, .snippet-large-source::before, .social-block.opened
.social-block__networks::before, .social-block.flat::before, .page-block::before,
.login-registration::before, .sing-in-form__cols::before,
.settings-form-layout__bottom::before, .bookshelf-launcher__groups::before,
.answer-filter::before, .clearfix::after, .columns::after, .other-sources-list::after,
.footer__inner-wrap-2::after, .dark-flat__inner-wrap-2::after,
.source-info__connections::after, .source-info__meta::after, .footer-sources-list::after,
.source-comment__row-a::after, .source-comment__row-b::after, .guru-info::after,
.answer-list-block__inner-wrap::after, .answer__row-a::after, .answer__row-b::after,
.settings-form-layout__cols::after, .bookshelf-item .bookshelf-item__row-a::after,
.bookshelf-item__row-b::after, .settings-form .control-group::after,
.toolbar__inner-wrap::after, .footer__nav > ul::after, .source-line::after,
.welcome-menu::after, .snippet-large-source::after, .social-block.opened
.social-block__networks::after, .social-block.flat::after, .page-block::after,
.login-registration::after, .sing-in-form__cols::after, .settings-form-layout__bottom::after,
.bookshelf-launcher__groups::after, .answer-filter::after {
    content: " ";
    display: table;
}
```


## utm_* и прочий мусор в URL

Терпеть не могу адреса, в которых содержится мусор. Примеры:

    http://www.youtube.com/watch?feature=player_embedded&v=bLyEgrFO5E4
    http://cheezburger.com/7082315776?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+ThereIFixedIt+%28There%2C+I+Fixed+It.%29&utm_content=Google+Reader

Люди обмениваются такими ссылками. Их присылают мне. Я негодую. Когда я хочу отправить кому-то такую ссылку, мне приходится вручную вычищать из неё мусор.

Похоже, что YouTube совсем недавно от такого отказался. Это хорошо.

Кто-то возразит, что utm_* нужно для какой-нибудь аналитической фигни. Но посмотрите, как сделано в [блоге Google](http://googleblog.blogspot.ru/2013/02/our-first-ever-google-journalism.html?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed:+blogspot/MKuf+(Official+Google+Blog)). Да, ссылка с мусором, но никто не сможет отправить её в таком виде дальше: сразу после перехода по ней, она заменяется на нормальную.


## www.*

Кошмар, отстой и каменный век.

См. также: CNAME.


## WYSIWYG

В мире нет ни одного WYSIWYG-редактора, который бы хорошо работал. Часто поведение визивига вообще непредсказуемо. А ещё люди любят вставлять в редактор текст прямо из Office Word, и тогда дизайнер сайта плачет кровавыми слезами.


## XML

XML — это очень крутой формат, крутизна которого нужна в очень ограниченном количестве случаев, а во всех остальных он просто избыточен. Для веба нет ничего лучше, чем JSON. В конце концов, это родной формат для JavaScript.


## Веб-шрифты

Про шрифты будет отдельный пост. Вкратце: их следует использовать очень осторожно.


## Домены на кириллице

Домены на кириллице — это ложь. Пользователь вводит адрес ’котики.рф’, потом отправляет своим друзьям ссылку через Skype, а они получают такое: ’http://xn--h1aaebsy.xn--p1ai/’. И с такими же адресами приходится иметь дело администраторам веб-серверов. Очень удобно, ага.


## Загрузка файлов

`<input type="file">` — это самое нелепое, что есть в HTML-формах. Невозможно вернуть состояние этого инпута после отправки формы с ошибками. Прогресс загрузки хрен вытащишь. А если кто-то захочет вставить этот инпут в форму, отправляемую через AJAX, он будет очень долго чесать затылок.


## Кастомные контролы

Тут вообще очень много боли. Необходимость в них — прихоть дизайнера. Часто приходится заниматься реализацией того, что уже есть в браузере, но выглядит не совсем так, как хочет дизайнер. Что добиться правильной работы кастомных контролов — нужно очень долго возиться, и успех будет сомнителен.

См. также: загрузка файлов.


## Плагины

Как только вы захотите использовать какой-нибудь плагин (Flash, Silverlight, Unity…), приготовьтесь к тому, что:

* пользователи будут ругаться на необходимость установки ещё одного плагина;
* пользователи будут ругаться на необходимость перезапуска браузера после установки этого плагина;
* пользователи будут игнорировать просьбы обновить этот плагин;
* некоторые пользователи будут ругаться на плохую работу этого плагина;
* все пользователи будут ругаться на плохую работу этого плагина;
* некоторые пользователи будут ругаться на отстуствие плагина под их платформу;
* все мобильные пользователи будут ругаться на отстуствие плагина под их платформу;
* в этом плагине найдут очередную дыру.